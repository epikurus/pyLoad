#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:slots,dynamic
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor, TApplicationException
from thrift.protocol.TBase import TBase, TExceptionBase


class Iface(object):
  def getServerVersion(self, ):
    pass

  def statusServer(self, ):
    pass

  def pauseServer(self, ):
    pass

  def unpauseServer(self, ):
    pass

  def togglePause(self, ):
    pass

  def freeSpace(self, ):
    pass

  def kill(self, ):
    pass

  def restart(self, ):
    pass

  def getLog(self, offset):
    """
    Parameters:
     - offset
    """
    pass

  def isTimeDownload(self, ):
    pass

  def isTimeReconnect(self, ):
    pass

  def toggleReconnect(self, ):
    pass

  def scanDownloadFolder(self, ):
    pass

  def getConfigValue(self, section, option):
    """
    Parameters:
     - section
     - option
    """
    pass

  def setConfigValue(self, section, option, value):
    """
    Parameters:
     - section
     - option
     - value
    """
    pass

  def getConfig(self, ):
    pass

  def getPluginConfig(self, ):
    pass

  def configureSection(self, section):
    """
    Parameters:
     - section
    """
    pass

  def setConfigHandler(self, plugin, iid, value):
    """
    Parameters:
     - plugin
     - iid
     - value
    """
    pass

  def checkURLs(self, urls):
    """
    Parameters:
     - urls
    """
    pass

  def parseURLs(self, html, url):
    """
    Parameters:
     - html
     - url
    """
    pass

  def checkOnlineStatus(self, urls):
    """
    Parameters:
     - urls
    """
    pass

  def checkOnlineStatusContainer(self, urls, filename, data):
    """
    Parameters:
     - urls
     - filename
     - data
    """
    pass

  def pollResults(self, rid):
    """
    Parameters:
     - rid
    """
    pass

  def generatePackages(self, links):
    """
    Parameters:
     - links
    """
    pass

  def generateAndAddPackages(self, links, paused):
    """
    Parameters:
     - links
     - paused
    """
    pass

  def createPackage(self, name, folder, root, password, site, comment, paused):
    """
    Parameters:
     - name
     - folder
     - root
     - password
     - site
     - comment
     - paused
    """
    pass

  def addPackage(self, name, links, password):
    """
    Parameters:
     - name
     - links
     - password
    """
    pass

  def addPackageP(self, name, links, password, paused):
    """
    Parameters:
     - name
     - links
     - password
     - paused
    """
    pass

  def addPackageChild(self, name, links, password, root, paused):
    """
    Parameters:
     - name
     - links
     - password
     - root
     - paused
    """
    pass

  def uploadContainer(self, filename, data):
    """
    Parameters:
     - filename
     - data
    """
    pass

  def addLinks(self, pid, links):
    """
    Parameters:
     - pid
     - links
    """
    pass

  def addLocalFile(self, pid, name, path):
    """
    Parameters:
     - pid
     - name
     - path
    """
    pass

  def deleteFiles(self, fids):
    """
    Parameters:
     - fids
    """
    pass

  def deletePackages(self, pids):
    """
    Parameters:
     - pids
    """
    pass

  def getCollector(self, ):
    pass

  def addToCollector(self, links):
    """
    Parameters:
     - links
    """
    pass

  def addFromCollector(self, name, paused):
    """
    Parameters:
     - name
     - paused
    """
    pass

  def renameCollPack(self, name, new_name):
    """
    Parameters:
     - name
     - new_name
    """
    pass

  def deleteCollPack(self, name):
    """
    Parameters:
     - name
    """
    pass

  def deleteCollLink(self, url):
    """
    Parameters:
     - url
    """
    pass

  def getAllFiles(self, ):
    pass

  def getAllUnfinishedFiles(self, ):
    pass

  def getFileTree(self, pid, full):
    """
    Parameters:
     - pid
     - full
    """
    pass

  def getUnfinishedFileTree(self, pid, full):
    """
    Parameters:
     - pid
     - full
    """
    pass

  def getPackageContent(self, pid):
    """
    Parameters:
     - pid
    """
    pass

  def getPackageInfo(self, pid):
    """
    Parameters:
     - pid
    """
    pass

  def getFileInfo(self, fid):
    """
    Parameters:
     - fid
    """
    pass

  def findFiles(self, pattern):
    """
    Parameters:
     - pattern
    """
    pass

  def restartPackage(self, pid):
    """
    Parameters:
     - pid
    """
    pass

  def restartFile(self, fid):
    """
    Parameters:
     - fid
    """
    pass

  def recheckPackage(self, pid):
    """
    Parameters:
     - pid
    """
    pass

  def restartFailed(self, ):
    pass

  def setFilePaused(self, fid, paused):
    """
    Parameters:
     - fid
     - paused
    """
    pass

  def setPackagePaused(self, pid, paused):
    """
    Parameters:
     - pid
     - paused
    """
    pass

  def setPackageFolder(self, pid, path):
    """
    Parameters:
     - pid
     - path
    """
    pass

  def setPackageData(self, pid, data):
    """
    Parameters:
     - pid
     - data
    """
    pass

  def movePackage(self, pid, root):
    """
    Parameters:
     - pid
     - root
    """
    pass

  def moveFiles(self, fids, pid):
    """
    Parameters:
     - fids
     - pid
    """
    pass

  def orderPackage(self, pids, position):
    """
    Parameters:
     - pids
     - position
    """
    pass

  def orderFiles(self, fids, pid, position):
    """
    Parameters:
     - fids
     - pid
     - position
    """
    pass

  def getProgressInfo(self, ):
    pass

  def stopDownloads(self, fids):
    """
    Parameters:
     - fids
    """
    pass

  def stopAllDownloads(self, ):
    pass

  def isInteractionWaiting(self, mode):
    """
    Parameters:
     - mode
    """
    pass

  def getInteractionTask(self, mode):
    """
    Parameters:
     - mode
    """
    pass

  def setInteractionResult(self, iid, result):
    """
    Parameters:
     - iid
     - result
    """
    pass

  def generateDownloadLink(self, fid, timeout):
    """
    Parameters:
     - fid
     - timeout
    """
    pass

  def getNotifications(self, ):
    pass

  def getEvents(self, uuid):
    """
    Parameters:
     - uuid
    """
    pass

  def getAccounts(self, refresh):
    """
    Parameters:
     - refresh
    """
    pass

  def getAccountTypes(self, ):
    pass

  def updateAccount(self, plugin, account, password, options):
    """
    Parameters:
     - plugin
     - account
     - password
     - options
    """
    pass

  def removeAccount(self, plugin, account):
    """
    Parameters:
     - plugin
     - account
    """
    pass

  def login(self, username, password):
    """
    Parameters:
     - username
     - password
    """
    pass

  def getUserData(self, ):
    pass

  def getAllUserData(self, ):
    pass

  def addUser(self, username, password):
    """
    Parameters:
     - username
     - password
    """
    pass

  def updateUserData(self, data):
    """
    Parameters:
     - data
    """
    pass

  def removeUser(self, uid):
    """
    Parameters:
     - uid
    """
    pass

  def setPassword(self, username, old_password, new_password):
    """
    Parameters:
     - username
     - old_password
     - new_password
    """
    pass

  def getAllInfo(self, ):
    pass

  def getInfoByPlugin(self, plugin):
    """
    Parameters:
     - plugin
    """
    pass

  def getAddonHandler(self, ):
    pass

  def hasAddonHandler(self, plugin, func):
    """
    Parameters:
     - plugin
     - func
    """
    pass

  def callAddon(self, plugin, func, arguments):
    """
    Parameters:
     - plugin
     - func
     - arguments
    """
    pass

  def callAddonHandler(self, plugin, func, pid_or_fid):
    """
    Parameters:
     - plugin
     - func
     - pid_or_fid
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getServerVersion(self, ):
    self.send_getServerVersion()
    return self.recv_getServerVersion()

  def send_getServerVersion(self, ):
    self._oprot.writeMessageBegin('getServerVersion', TMessageType.CALL, self._seqid)
    args = getServerVersion_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getServerVersion(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getServerVersion_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getServerVersion failed: unknown result");

  def statusServer(self, ):
    self.send_statusServer()
    return self.recv_statusServer()

  def send_statusServer(self, ):
    self._oprot.writeMessageBegin('statusServer', TMessageType.CALL, self._seqid)
    args = statusServer_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_statusServer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = statusServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "statusServer failed: unknown result");

  def pauseServer(self, ):
    self.send_pauseServer()
    self.recv_pauseServer()

  def send_pauseServer(self, ):
    self._oprot.writeMessageBegin('pauseServer', TMessageType.CALL, self._seqid)
    args = pauseServer_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_pauseServer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = pauseServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def unpauseServer(self, ):
    self.send_unpauseServer()
    self.recv_unpauseServer()

  def send_unpauseServer(self, ):
    self._oprot.writeMessageBegin('unpauseServer', TMessageType.CALL, self._seqid)
    args = unpauseServer_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unpauseServer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = unpauseServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def togglePause(self, ):
    self.send_togglePause()
    return self.recv_togglePause()

  def send_togglePause(self, ):
    self._oprot.writeMessageBegin('togglePause', TMessageType.CALL, self._seqid)
    args = togglePause_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_togglePause(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = togglePause_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "togglePause failed: unknown result");

  def freeSpace(self, ):
    self.send_freeSpace()
    return self.recv_freeSpace()

  def send_freeSpace(self, ):
    self._oprot.writeMessageBegin('freeSpace', TMessageType.CALL, self._seqid)
    args = freeSpace_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_freeSpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = freeSpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "freeSpace failed: unknown result");

  def kill(self, ):
    self.send_kill()
    self.recv_kill()

  def send_kill(self, ):
    self._oprot.writeMessageBegin('kill', TMessageType.CALL, self._seqid)
    args = kill_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_kill(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = kill_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def restart(self, ):
    self.send_restart()
    self.recv_restart()

  def send_restart(self, ):
    self._oprot.writeMessageBegin('restart', TMessageType.CALL, self._seqid)
    args = restart_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_restart(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = restart_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def getLog(self, offset):
    """
    Parameters:
     - offset
    """
    self.send_getLog(offset)
    return self.recv_getLog()

  def send_getLog(self, offset):
    self._oprot.writeMessageBegin('getLog', TMessageType.CALL, self._seqid)
    args = getLog_args()
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getLog(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getLog_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getLog failed: unknown result");

  def isTimeDownload(self, ):
    self.send_isTimeDownload()
    return self.recv_isTimeDownload()

  def send_isTimeDownload(self, ):
    self._oprot.writeMessageBegin('isTimeDownload', TMessageType.CALL, self._seqid)
    args = isTimeDownload_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isTimeDownload(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = isTimeDownload_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isTimeDownload failed: unknown result");

  def isTimeReconnect(self, ):
    self.send_isTimeReconnect()
    return self.recv_isTimeReconnect()

  def send_isTimeReconnect(self, ):
    self._oprot.writeMessageBegin('isTimeReconnect', TMessageType.CALL, self._seqid)
    args = isTimeReconnect_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isTimeReconnect(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = isTimeReconnect_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isTimeReconnect failed: unknown result");

  def toggleReconnect(self, ):
    self.send_toggleReconnect()
    return self.recv_toggleReconnect()

  def send_toggleReconnect(self, ):
    self._oprot.writeMessageBegin('toggleReconnect', TMessageType.CALL, self._seqid)
    args = toggleReconnect_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_toggleReconnect(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = toggleReconnect_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "toggleReconnect failed: unknown result");

  def scanDownloadFolder(self, ):
    self.send_scanDownloadFolder()
    self.recv_scanDownloadFolder()

  def send_scanDownloadFolder(self, ):
    self._oprot.writeMessageBegin('scanDownloadFolder', TMessageType.CALL, self._seqid)
    args = scanDownloadFolder_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_scanDownloadFolder(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = scanDownloadFolder_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def getConfigValue(self, section, option):
    """
    Parameters:
     - section
     - option
    """
    self.send_getConfigValue(section, option)
    return self.recv_getConfigValue()

  def send_getConfigValue(self, section, option):
    self._oprot.writeMessageBegin('getConfigValue', TMessageType.CALL, self._seqid)
    args = getConfigValue_args()
    args.section = section
    args.option = option
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getConfigValue(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getConfigValue_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getConfigValue failed: unknown result");

  def setConfigValue(self, section, option, value):
    """
    Parameters:
     - section
     - option
     - value
    """
    self.send_setConfigValue(section, option, value)
    self.recv_setConfigValue()

  def send_setConfigValue(self, section, option, value):
    self._oprot.writeMessageBegin('setConfigValue', TMessageType.CALL, self._seqid)
    args = setConfigValue_args()
    args.section = section
    args.option = option
    args.value = value
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setConfigValue(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setConfigValue_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def getConfig(self, ):
    self.send_getConfig()
    return self.recv_getConfig()

  def send_getConfig(self, ):
    self._oprot.writeMessageBegin('getConfig', TMessageType.CALL, self._seqid)
    args = getConfig_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getConfig(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getConfig_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getConfig failed: unknown result");

  def getPluginConfig(self, ):
    self.send_getPluginConfig()
    return self.recv_getPluginConfig()

  def send_getPluginConfig(self, ):
    self._oprot.writeMessageBegin('getPluginConfig', TMessageType.CALL, self._seqid)
    args = getPluginConfig_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPluginConfig(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getPluginConfig_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPluginConfig failed: unknown result");

  def configureSection(self, section):
    """
    Parameters:
     - section
    """
    self.send_configureSection(section)
    return self.recv_configureSection()

  def send_configureSection(self, section):
    self._oprot.writeMessageBegin('configureSection', TMessageType.CALL, self._seqid)
    args = configureSection_args()
    args.section = section
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_configureSection(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = configureSection_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "configureSection failed: unknown result");

  def setConfigHandler(self, plugin, iid, value):
    """
    Parameters:
     - plugin
     - iid
     - value
    """
    self.send_setConfigHandler(plugin, iid, value)
    self.recv_setConfigHandler()

  def send_setConfigHandler(self, plugin, iid, value):
    self._oprot.writeMessageBegin('setConfigHandler', TMessageType.CALL, self._seqid)
    args = setConfigHandler_args()
    args.plugin = plugin
    args.iid = iid
    args.value = value
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setConfigHandler(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setConfigHandler_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def checkURLs(self, urls):
    """
    Parameters:
     - urls
    """
    self.send_checkURLs(urls)
    return self.recv_checkURLs()

  def send_checkURLs(self, urls):
    self._oprot.writeMessageBegin('checkURLs', TMessageType.CALL, self._seqid)
    args = checkURLs_args()
    args.urls = urls
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_checkURLs(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = checkURLs_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "checkURLs failed: unknown result");

  def parseURLs(self, html, url):
    """
    Parameters:
     - html
     - url
    """
    self.send_parseURLs(html, url)
    return self.recv_parseURLs()

  def send_parseURLs(self, html, url):
    self._oprot.writeMessageBegin('parseURLs', TMessageType.CALL, self._seqid)
    args = parseURLs_args()
    args.html = html
    args.url = url
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_parseURLs(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = parseURLs_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "parseURLs failed: unknown result");

  def checkOnlineStatus(self, urls):
    """
    Parameters:
     - urls
    """
    self.send_checkOnlineStatus(urls)
    return self.recv_checkOnlineStatus()

  def send_checkOnlineStatus(self, urls):
    self._oprot.writeMessageBegin('checkOnlineStatus', TMessageType.CALL, self._seqid)
    args = checkOnlineStatus_args()
    args.urls = urls
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_checkOnlineStatus(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = checkOnlineStatus_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "checkOnlineStatus failed: unknown result");

  def checkOnlineStatusContainer(self, urls, filename, data):
    """
    Parameters:
     - urls
     - filename
     - data
    """
    self.send_checkOnlineStatusContainer(urls, filename, data)
    return self.recv_checkOnlineStatusContainer()

  def send_checkOnlineStatusContainer(self, urls, filename, data):
    self._oprot.writeMessageBegin('checkOnlineStatusContainer', TMessageType.CALL, self._seqid)
    args = checkOnlineStatusContainer_args()
    args.urls = urls
    args.filename = filename
    args.data = data
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_checkOnlineStatusContainer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = checkOnlineStatusContainer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "checkOnlineStatusContainer failed: unknown result");

  def pollResults(self, rid):
    """
    Parameters:
     - rid
    """
    self.send_pollResults(rid)
    return self.recv_pollResults()

  def send_pollResults(self, rid):
    self._oprot.writeMessageBegin('pollResults', TMessageType.CALL, self._seqid)
    args = pollResults_args()
    args.rid = rid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_pollResults(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = pollResults_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "pollResults failed: unknown result");

  def generatePackages(self, links):
    """
    Parameters:
     - links
    """
    self.send_generatePackages(links)
    return self.recv_generatePackages()

  def send_generatePackages(self, links):
    self._oprot.writeMessageBegin('generatePackages', TMessageType.CALL, self._seqid)
    args = generatePackages_args()
    args.links = links
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_generatePackages(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = generatePackages_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "generatePackages failed: unknown result");

  def generateAndAddPackages(self, links, paused):
    """
    Parameters:
     - links
     - paused
    """
    self.send_generateAndAddPackages(links, paused)
    return self.recv_generateAndAddPackages()

  def send_generateAndAddPackages(self, links, paused):
    self._oprot.writeMessageBegin('generateAndAddPackages', TMessageType.CALL, self._seqid)
    args = generateAndAddPackages_args()
    args.links = links
    args.paused = paused
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_generateAndAddPackages(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = generateAndAddPackages_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "generateAndAddPackages failed: unknown result");

  def createPackage(self, name, folder, root, password, site, comment, paused):
    """
    Parameters:
     - name
     - folder
     - root
     - password
     - site
     - comment
     - paused
    """
    self.send_createPackage(name, folder, root, password, site, comment, paused)
    return self.recv_createPackage()

  def send_createPackage(self, name, folder, root, password, site, comment, paused):
    self._oprot.writeMessageBegin('createPackage', TMessageType.CALL, self._seqid)
    args = createPackage_args()
    args.name = name
    args.folder = folder
    args.root = root
    args.password = password
    args.site = site
    args.comment = comment
    args.paused = paused
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createPackage(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createPackage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createPackage failed: unknown result");

  def addPackage(self, name, links, password):
    """
    Parameters:
     - name
     - links
     - password
    """
    self.send_addPackage(name, links, password)
    return self.recv_addPackage()

  def send_addPackage(self, name, links, password):
    self._oprot.writeMessageBegin('addPackage', TMessageType.CALL, self._seqid)
    args = addPackage_args()
    args.name = name
    args.links = links
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addPackage(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addPackage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addPackage failed: unknown result");

  def addPackageP(self, name, links, password, paused):
    """
    Parameters:
     - name
     - links
     - password
     - paused
    """
    self.send_addPackageP(name, links, password, paused)
    return self.recv_addPackageP()

  def send_addPackageP(self, name, links, password, paused):
    self._oprot.writeMessageBegin('addPackageP', TMessageType.CALL, self._seqid)
    args = addPackageP_args()
    args.name = name
    args.links = links
    args.password = password
    args.paused = paused
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addPackageP(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addPackageP_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addPackageP failed: unknown result");

  def addPackageChild(self, name, links, password, root, paused):
    """
    Parameters:
     - name
     - links
     - password
     - root
     - paused
    """
    self.send_addPackageChild(name, links, password, root, paused)
    return self.recv_addPackageChild()

  def send_addPackageChild(self, name, links, password, root, paused):
    self._oprot.writeMessageBegin('addPackageChild', TMessageType.CALL, self._seqid)
    args = addPackageChild_args()
    args.name = name
    args.links = links
    args.password = password
    args.root = root
    args.paused = paused
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addPackageChild(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addPackageChild_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addPackageChild failed: unknown result");

  def uploadContainer(self, filename, data):
    """
    Parameters:
     - filename
     - data
    """
    self.send_uploadContainer(filename, data)
    return self.recv_uploadContainer()

  def send_uploadContainer(self, filename, data):
    self._oprot.writeMessageBegin('uploadContainer', TMessageType.CALL, self._seqid)
    args = uploadContainer_args()
    args.filename = filename
    args.data = data
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_uploadContainer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = uploadContainer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "uploadContainer failed: unknown result");

  def addLinks(self, pid, links):
    """
    Parameters:
     - pid
     - links
    """
    self.send_addLinks(pid, links)
    self.recv_addLinks()

  def send_addLinks(self, pid, links):
    self._oprot.writeMessageBegin('addLinks', TMessageType.CALL, self._seqid)
    args = addLinks_args()
    args.pid = pid
    args.links = links
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addLinks(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addLinks_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def addLocalFile(self, pid, name, path):
    """
    Parameters:
     - pid
     - name
     - path
    """
    self.send_addLocalFile(pid, name, path)
    self.recv_addLocalFile()

  def send_addLocalFile(self, pid, name, path):
    self._oprot.writeMessageBegin('addLocalFile', TMessageType.CALL, self._seqid)
    args = addLocalFile_args()
    args.pid = pid
    args.name = name
    args.path = path
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addLocalFile(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addLocalFile_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def deleteFiles(self, fids):
    """
    Parameters:
     - fids
    """
    self.send_deleteFiles(fids)
    self.recv_deleteFiles()

  def send_deleteFiles(self, fids):
    self._oprot.writeMessageBegin('deleteFiles', TMessageType.CALL, self._seqid)
    args = deleteFiles_args()
    args.fids = fids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteFiles(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteFiles_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def deletePackages(self, pids):
    """
    Parameters:
     - pids
    """
    self.send_deletePackages(pids)
    self.recv_deletePackages()

  def send_deletePackages(self, pids):
    self._oprot.writeMessageBegin('deletePackages', TMessageType.CALL, self._seqid)
    args = deletePackages_args()
    args.pids = pids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deletePackages(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deletePackages_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def getCollector(self, ):
    self.send_getCollector()
    return self.recv_getCollector()

  def send_getCollector(self, ):
    self._oprot.writeMessageBegin('getCollector', TMessageType.CALL, self._seqid)
    args = getCollector_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCollector(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getCollector_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCollector failed: unknown result");

  def addToCollector(self, links):
    """
    Parameters:
     - links
    """
    self.send_addToCollector(links)
    self.recv_addToCollector()

  def send_addToCollector(self, links):
    self._oprot.writeMessageBegin('addToCollector', TMessageType.CALL, self._seqid)
    args = addToCollector_args()
    args.links = links
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addToCollector(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addToCollector_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def addFromCollector(self, name, paused):
    """
    Parameters:
     - name
     - paused
    """
    self.send_addFromCollector(name, paused)
    return self.recv_addFromCollector()

  def send_addFromCollector(self, name, paused):
    self._oprot.writeMessageBegin('addFromCollector', TMessageType.CALL, self._seqid)
    args = addFromCollector_args()
    args.name = name
    args.paused = paused
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addFromCollector(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addFromCollector_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addFromCollector failed: unknown result");

  def renameCollPack(self, name, new_name):
    """
    Parameters:
     - name
     - new_name
    """
    self.send_renameCollPack(name, new_name)
    self.recv_renameCollPack()

  def send_renameCollPack(self, name, new_name):
    self._oprot.writeMessageBegin('renameCollPack', TMessageType.CALL, self._seqid)
    args = renameCollPack_args()
    args.name = name
    args.new_name = new_name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_renameCollPack(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = renameCollPack_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def deleteCollPack(self, name):
    """
    Parameters:
     - name
    """
    self.send_deleteCollPack(name)
    self.recv_deleteCollPack()

  def send_deleteCollPack(self, name):
    self._oprot.writeMessageBegin('deleteCollPack', TMessageType.CALL, self._seqid)
    args = deleteCollPack_args()
    args.name = name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteCollPack(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteCollPack_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def deleteCollLink(self, url):
    """
    Parameters:
     - url
    """
    self.send_deleteCollLink(url)
    self.recv_deleteCollLink()

  def send_deleteCollLink(self, url):
    self._oprot.writeMessageBegin('deleteCollLink', TMessageType.CALL, self._seqid)
    args = deleteCollLink_args()
    args.url = url
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteCollLink(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteCollLink_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def getAllFiles(self, ):
    self.send_getAllFiles()
    return self.recv_getAllFiles()

  def send_getAllFiles(self, ):
    self._oprot.writeMessageBegin('getAllFiles', TMessageType.CALL, self._seqid)
    args = getAllFiles_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllFiles(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllFiles_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllFiles failed: unknown result");

  def getAllUnfinishedFiles(self, ):
    self.send_getAllUnfinishedFiles()
    return self.recv_getAllUnfinishedFiles()

  def send_getAllUnfinishedFiles(self, ):
    self._oprot.writeMessageBegin('getAllUnfinishedFiles', TMessageType.CALL, self._seqid)
    args = getAllUnfinishedFiles_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllUnfinishedFiles(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllUnfinishedFiles_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllUnfinishedFiles failed: unknown result");

  def getFileTree(self, pid, full):
    """
    Parameters:
     - pid
     - full
    """
    self.send_getFileTree(pid, full)
    return self.recv_getFileTree()

  def send_getFileTree(self, pid, full):
    self._oprot.writeMessageBegin('getFileTree', TMessageType.CALL, self._seqid)
    args = getFileTree_args()
    args.pid = pid
    args.full = full
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getFileTree(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getFileTree_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getFileTree failed: unknown result");

  def getUnfinishedFileTree(self, pid, full):
    """
    Parameters:
     - pid
     - full
    """
    self.send_getUnfinishedFileTree(pid, full)
    return self.recv_getUnfinishedFileTree()

  def send_getUnfinishedFileTree(self, pid, full):
    self._oprot.writeMessageBegin('getUnfinishedFileTree', TMessageType.CALL, self._seqid)
    args = getUnfinishedFileTree_args()
    args.pid = pid
    args.full = full
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUnfinishedFileTree(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getUnfinishedFileTree_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUnfinishedFileTree failed: unknown result");

  def getPackageContent(self, pid):
    """
    Parameters:
     - pid
    """
    self.send_getPackageContent(pid)
    return self.recv_getPackageContent()

  def send_getPackageContent(self, pid):
    self._oprot.writeMessageBegin('getPackageContent', TMessageType.CALL, self._seqid)
    args = getPackageContent_args()
    args.pid = pid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPackageContent(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getPackageContent_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPackageContent failed: unknown result");

  def getPackageInfo(self, pid):
    """
    Parameters:
     - pid
    """
    self.send_getPackageInfo(pid)
    return self.recv_getPackageInfo()

  def send_getPackageInfo(self, pid):
    self._oprot.writeMessageBegin('getPackageInfo', TMessageType.CALL, self._seqid)
    args = getPackageInfo_args()
    args.pid = pid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPackageInfo(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getPackageInfo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPackageInfo failed: unknown result");

  def getFileInfo(self, fid):
    """
    Parameters:
     - fid
    """
    self.send_getFileInfo(fid)
    return self.recv_getFileInfo()

  def send_getFileInfo(self, fid):
    self._oprot.writeMessageBegin('getFileInfo', TMessageType.CALL, self._seqid)
    args = getFileInfo_args()
    args.fid = fid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getFileInfo(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getFileInfo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getFileInfo failed: unknown result");

  def findFiles(self, pattern):
    """
    Parameters:
     - pattern
    """
    self.send_findFiles(pattern)
    return self.recv_findFiles()

  def send_findFiles(self, pattern):
    self._oprot.writeMessageBegin('findFiles', TMessageType.CALL, self._seqid)
    args = findFiles_args()
    args.pattern = pattern
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findFiles(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findFiles_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findFiles failed: unknown result");

  def restartPackage(self, pid):
    """
    Parameters:
     - pid
    """
    self.send_restartPackage(pid)
    self.recv_restartPackage()

  def send_restartPackage(self, pid):
    self._oprot.writeMessageBegin('restartPackage', TMessageType.CALL, self._seqid)
    args = restartPackage_args()
    args.pid = pid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_restartPackage(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = restartPackage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def restartFile(self, fid):
    """
    Parameters:
     - fid
    """
    self.send_restartFile(fid)
    self.recv_restartFile()

  def send_restartFile(self, fid):
    self._oprot.writeMessageBegin('restartFile', TMessageType.CALL, self._seqid)
    args = restartFile_args()
    args.fid = fid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_restartFile(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = restartFile_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def recheckPackage(self, pid):
    """
    Parameters:
     - pid
    """
    self.send_recheckPackage(pid)
    self.recv_recheckPackage()

  def send_recheckPackage(self, pid):
    self._oprot.writeMessageBegin('recheckPackage', TMessageType.CALL, self._seqid)
    args = recheckPackage_args()
    args.pid = pid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_recheckPackage(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = recheckPackage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def restartFailed(self, ):
    self.send_restartFailed()
    self.recv_restartFailed()

  def send_restartFailed(self, ):
    self._oprot.writeMessageBegin('restartFailed', TMessageType.CALL, self._seqid)
    args = restartFailed_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_restartFailed(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = restartFailed_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def setFilePaused(self, fid, paused):
    """
    Parameters:
     - fid
     - paused
    """
    self.send_setFilePaused(fid, paused)
    self.recv_setFilePaused()

  def send_setFilePaused(self, fid, paused):
    self._oprot.writeMessageBegin('setFilePaused', TMessageType.CALL, self._seqid)
    args = setFilePaused_args()
    args.fid = fid
    args.paused = paused
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setFilePaused(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setFilePaused_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def setPackagePaused(self, pid, paused):
    """
    Parameters:
     - pid
     - paused
    """
    self.send_setPackagePaused(pid, paused)
    self.recv_setPackagePaused()

  def send_setPackagePaused(self, pid, paused):
    self._oprot.writeMessageBegin('setPackagePaused', TMessageType.CALL, self._seqid)
    args = setPackagePaused_args()
    args.pid = pid
    args.paused = paused
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setPackagePaused(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setPackagePaused_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def setPackageFolder(self, pid, path):
    """
    Parameters:
     - pid
     - path
    """
    self.send_setPackageFolder(pid, path)
    return self.recv_setPackageFolder()

  def send_setPackageFolder(self, pid, path):
    self._oprot.writeMessageBegin('setPackageFolder', TMessageType.CALL, self._seqid)
    args = setPackageFolder_args()
    args.pid = pid
    args.path = path
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setPackageFolder(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setPackageFolder_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setPackageFolder failed: unknown result");

  def setPackageData(self, pid, data):
    """
    Parameters:
     - pid
     - data
    """
    self.send_setPackageData(pid, data)
    self.recv_setPackageData()

  def send_setPackageData(self, pid, data):
    self._oprot.writeMessageBegin('setPackageData', TMessageType.CALL, self._seqid)
    args = setPackageData_args()
    args.pid = pid
    args.data = data
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setPackageData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setPackageData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    return

  def movePackage(self, pid, root):
    """
    Parameters:
     - pid
     - root
    """
    self.send_movePackage(pid, root)
    return self.recv_movePackage()

  def send_movePackage(self, pid, root):
    self._oprot.writeMessageBegin('movePackage', TMessageType.CALL, self._seqid)
    args = movePackage_args()
    args.pid = pid
    args.root = root
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_movePackage(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = movePackage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "movePackage failed: unknown result");

  def moveFiles(self, fids, pid):
    """
    Parameters:
     - fids
     - pid
    """
    self.send_moveFiles(fids, pid)
    return self.recv_moveFiles()

  def send_moveFiles(self, fids, pid):
    self._oprot.writeMessageBegin('moveFiles', TMessageType.CALL, self._seqid)
    args = moveFiles_args()
    args.fids = fids
    args.pid = pid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_moveFiles(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = moveFiles_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "moveFiles failed: unknown result");

  def orderPackage(self, pids, position):
    """
    Parameters:
     - pids
     - position
    """
    self.send_orderPackage(pids, position)
    self.recv_orderPackage()

  def send_orderPackage(self, pids, position):
    self._oprot.writeMessageBegin('orderPackage', TMessageType.CALL, self._seqid)
    args = orderPackage_args()
    args.pids = pids
    args.position = position
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_orderPackage(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = orderPackage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def orderFiles(self, fids, pid, position):
    """
    Parameters:
     - fids
     - pid
     - position
    """
    self.send_orderFiles(fids, pid, position)
    self.recv_orderFiles()

  def send_orderFiles(self, fids, pid, position):
    self._oprot.writeMessageBegin('orderFiles', TMessageType.CALL, self._seqid)
    args = orderFiles_args()
    args.fids = fids
    args.pid = pid
    args.position = position
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_orderFiles(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = orderFiles_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def getProgressInfo(self, ):
    self.send_getProgressInfo()
    return self.recv_getProgressInfo()

  def send_getProgressInfo(self, ):
    self._oprot.writeMessageBegin('getProgressInfo', TMessageType.CALL, self._seqid)
    args = getProgressInfo_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getProgressInfo(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getProgressInfo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getProgressInfo failed: unknown result");

  def stopDownloads(self, fids):
    """
    Parameters:
     - fids
    """
    self.send_stopDownloads(fids)
    self.recv_stopDownloads()

  def send_stopDownloads(self, fids):
    self._oprot.writeMessageBegin('stopDownloads', TMessageType.CALL, self._seqid)
    args = stopDownloads_args()
    args.fids = fids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stopDownloads(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stopDownloads_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def stopAllDownloads(self, ):
    self.send_stopAllDownloads()
    self.recv_stopAllDownloads()

  def send_stopAllDownloads(self, ):
    self._oprot.writeMessageBegin('stopAllDownloads', TMessageType.CALL, self._seqid)
    args = stopAllDownloads_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stopAllDownloads(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stopAllDownloads_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def isInteractionWaiting(self, mode):
    """
    Parameters:
     - mode
    """
    self.send_isInteractionWaiting(mode)
    return self.recv_isInteractionWaiting()

  def send_isInteractionWaiting(self, mode):
    self._oprot.writeMessageBegin('isInteractionWaiting', TMessageType.CALL, self._seqid)
    args = isInteractionWaiting_args()
    args.mode = mode
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isInteractionWaiting(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = isInteractionWaiting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isInteractionWaiting failed: unknown result");

  def getInteractionTask(self, mode):
    """
    Parameters:
     - mode
    """
    self.send_getInteractionTask(mode)
    return self.recv_getInteractionTask()

  def send_getInteractionTask(self, mode):
    self._oprot.writeMessageBegin('getInteractionTask', TMessageType.CALL, self._seqid)
    args = getInteractionTask_args()
    args.mode = mode
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getInteractionTask(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getInteractionTask_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getInteractionTask failed: unknown result");

  def setInteractionResult(self, iid, result):
    """
    Parameters:
     - iid
     - result
    """
    self.send_setInteractionResult(iid, result)
    self.recv_setInteractionResult()

  def send_setInteractionResult(self, iid, result):
    self._oprot.writeMessageBegin('setInteractionResult', TMessageType.CALL, self._seqid)
    args = setInteractionResult_args()
    args.iid = iid
    args.result = result
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setInteractionResult(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setInteractionResult_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def generateDownloadLink(self, fid, timeout):
    """
    Parameters:
     - fid
     - timeout
    """
    self.send_generateDownloadLink(fid, timeout)
    return self.recv_generateDownloadLink()

  def send_generateDownloadLink(self, fid, timeout):
    self._oprot.writeMessageBegin('generateDownloadLink', TMessageType.CALL, self._seqid)
    args = generateDownloadLink_args()
    args.fid = fid
    args.timeout = timeout
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_generateDownloadLink(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = generateDownloadLink_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "generateDownloadLink failed: unknown result");

  def getNotifications(self, ):
    self.send_getNotifications()
    return self.recv_getNotifications()

  def send_getNotifications(self, ):
    self._oprot.writeMessageBegin('getNotifications', TMessageType.CALL, self._seqid)
    args = getNotifications_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getNotifications(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getNotifications_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getNotifications failed: unknown result");

  def getEvents(self, uuid):
    """
    Parameters:
     - uuid
    """
    self.send_getEvents(uuid)
    return self.recv_getEvents()

  def send_getEvents(self, uuid):
    self._oprot.writeMessageBegin('getEvents', TMessageType.CALL, self._seqid)
    args = getEvents_args()
    args.uuid = uuid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getEvents(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getEvents_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getEvents failed: unknown result");

  def getAccounts(self, refresh):
    """
    Parameters:
     - refresh
    """
    self.send_getAccounts(refresh)
    return self.recv_getAccounts()

  def send_getAccounts(self, refresh):
    self._oprot.writeMessageBegin('getAccounts', TMessageType.CALL, self._seqid)
    args = getAccounts_args()
    args.refresh = refresh
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAccounts(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAccounts_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAccounts failed: unknown result");

  def getAccountTypes(self, ):
    self.send_getAccountTypes()
    return self.recv_getAccountTypes()

  def send_getAccountTypes(self, ):
    self._oprot.writeMessageBegin('getAccountTypes', TMessageType.CALL, self._seqid)
    args = getAccountTypes_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAccountTypes(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAccountTypes_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAccountTypes failed: unknown result");

  def updateAccount(self, plugin, account, password, options):
    """
    Parameters:
     - plugin
     - account
     - password
     - options
    """
    self.send_updateAccount(plugin, account, password, options)
    self.recv_updateAccount()

  def send_updateAccount(self, plugin, account, password, options):
    self._oprot.writeMessageBegin('updateAccount', TMessageType.CALL, self._seqid)
    args = updateAccount_args()
    args.plugin = plugin
    args.account = account
    args.password = password
    args.options = options
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateAccount(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def removeAccount(self, plugin, account):
    """
    Parameters:
     - plugin
     - account
    """
    self.send_removeAccount(plugin, account)
    self.recv_removeAccount()

  def send_removeAccount(self, plugin, account):
    self._oprot.writeMessageBegin('removeAccount', TMessageType.CALL, self._seqid)
    args = removeAccount_args()
    args.plugin = plugin
    args.account = account
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeAccount(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removeAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def login(self, username, password):
    """
    Parameters:
     - username
     - password
    """
    self.send_login(username, password)
    return self.recv_login()

  def send_login(self, username, password):
    self._oprot.writeMessageBegin('login', TMessageType.CALL, self._seqid)
    args = login_args()
    args.username = username
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_login(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = login_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "login failed: unknown result");

  def getUserData(self, ):
    self.send_getUserData()
    return self.recv_getUserData()

  def send_getUserData(self, ):
    self._oprot.writeMessageBegin('getUserData', TMessageType.CALL, self._seqid)
    args = getUserData_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getUserData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserData failed: unknown result");

  def getAllUserData(self, ):
    self.send_getAllUserData()
    return self.recv_getAllUserData()

  def send_getAllUserData(self, ):
    self._oprot.writeMessageBegin('getAllUserData', TMessageType.CALL, self._seqid)
    args = getAllUserData_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllUserData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllUserData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllUserData failed: unknown result");

  def addUser(self, username, password):
    """
    Parameters:
     - username
     - password
    """
    self.send_addUser(username, password)
    return self.recv_addUser()

  def send_addUser(self, username, password):
    self._oprot.writeMessageBegin('addUser', TMessageType.CALL, self._seqid)
    args = addUser_args()
    args.username = username
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addUser failed: unknown result");

  def updateUserData(self, data):
    """
    Parameters:
     - data
    """
    self.send_updateUserData(data)
    self.recv_updateUserData()

  def send_updateUserData(self, data):
    self._oprot.writeMessageBegin('updateUserData', TMessageType.CALL, self._seqid)
    args = updateUserData_args()
    args.data = data
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateUserData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateUserData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def removeUser(self, uid):
    """
    Parameters:
     - uid
    """
    self.send_removeUser(uid)
    self.recv_removeUser()

  def send_removeUser(self, uid):
    self._oprot.writeMessageBegin('removeUser', TMessageType.CALL, self._seqid)
    args = removeUser_args()
    args.uid = uid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removeUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def setPassword(self, username, old_password, new_password):
    """
    Parameters:
     - username
     - old_password
     - new_password
    """
    self.send_setPassword(username, old_password, new_password)
    return self.recv_setPassword()

  def send_setPassword(self, username, old_password, new_password):
    self._oprot.writeMessageBegin('setPassword', TMessageType.CALL, self._seqid)
    args = setPassword_args()
    args.username = username
    args.old_password = old_password
    args.new_password = new_password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setPassword(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setPassword_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setPassword failed: unknown result");

  def getAllInfo(self, ):
    self.send_getAllInfo()
    return self.recv_getAllInfo()

  def send_getAllInfo(self, ):
    self._oprot.writeMessageBegin('getAllInfo', TMessageType.CALL, self._seqid)
    args = getAllInfo_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllInfo(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllInfo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllInfo failed: unknown result");

  def getInfoByPlugin(self, plugin):
    """
    Parameters:
     - plugin
    """
    self.send_getInfoByPlugin(plugin)
    return self.recv_getInfoByPlugin()

  def send_getInfoByPlugin(self, plugin):
    self._oprot.writeMessageBegin('getInfoByPlugin', TMessageType.CALL, self._seqid)
    args = getInfoByPlugin_args()
    args.plugin = plugin
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getInfoByPlugin(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getInfoByPlugin_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getInfoByPlugin failed: unknown result");

  def getAddonHandler(self, ):
    self.send_getAddonHandler()
    return self.recv_getAddonHandler()

  def send_getAddonHandler(self, ):
    self._oprot.writeMessageBegin('getAddonHandler', TMessageType.CALL, self._seqid)
    args = getAddonHandler_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAddonHandler(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAddonHandler_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAddonHandler failed: unknown result");

  def hasAddonHandler(self, plugin, func):
    """
    Parameters:
     - plugin
     - func
    """
    self.send_hasAddonHandler(plugin, func)
    return self.recv_hasAddonHandler()

  def send_hasAddonHandler(self, plugin, func):
    self._oprot.writeMessageBegin('hasAddonHandler', TMessageType.CALL, self._seqid)
    args = hasAddonHandler_args()
    args.plugin = plugin
    args.func = func
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_hasAddonHandler(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = hasAddonHandler_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "hasAddonHandler failed: unknown result");

  def callAddon(self, plugin, func, arguments):
    """
    Parameters:
     - plugin
     - func
     - arguments
    """
    self.send_callAddon(plugin, func, arguments)
    self.recv_callAddon()

  def send_callAddon(self, plugin, func, arguments):
    self._oprot.writeMessageBegin('callAddon', TMessageType.CALL, self._seqid)
    args = callAddon_args()
    args.plugin = plugin
    args.func = func
    args.arguments = arguments
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_callAddon(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = callAddon_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    if result.ex is not None:
      raise result.ex
    return

  def callAddonHandler(self, plugin, func, pid_or_fid):
    """
    Parameters:
     - plugin
     - func
     - pid_or_fid
    """
    self.send_callAddonHandler(plugin, func, pid_or_fid)
    self.recv_callAddonHandler()

  def send_callAddonHandler(self, plugin, func, pid_or_fid):
    self._oprot.writeMessageBegin('callAddonHandler', TMessageType.CALL, self._seqid)
    args = callAddonHandler_args()
    args.plugin = plugin
    args.func = func
    args.pid_or_fid = pid_or_fid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_callAddonHandler(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = callAddonHandler_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.e is not None:
      raise result.e
    if result.ex is not None:
      raise result.ex
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getServerVersion"] = Processor.process_getServerVersion
    self._processMap["statusServer"] = Processor.process_statusServer
    self._processMap["pauseServer"] = Processor.process_pauseServer
    self._processMap["unpauseServer"] = Processor.process_unpauseServer
    self._processMap["togglePause"] = Processor.process_togglePause
    self._processMap["freeSpace"] = Processor.process_freeSpace
    self._processMap["kill"] = Processor.process_kill
    self._processMap["restart"] = Processor.process_restart
    self._processMap["getLog"] = Processor.process_getLog
    self._processMap["isTimeDownload"] = Processor.process_isTimeDownload
    self._processMap["isTimeReconnect"] = Processor.process_isTimeReconnect
    self._processMap["toggleReconnect"] = Processor.process_toggleReconnect
    self._processMap["scanDownloadFolder"] = Processor.process_scanDownloadFolder
    self._processMap["getConfigValue"] = Processor.process_getConfigValue
    self._processMap["setConfigValue"] = Processor.process_setConfigValue
    self._processMap["getConfig"] = Processor.process_getConfig
    self._processMap["getPluginConfig"] = Processor.process_getPluginConfig
    self._processMap["configureSection"] = Processor.process_configureSection
    self._processMap["setConfigHandler"] = Processor.process_setConfigHandler
    self._processMap["checkURLs"] = Processor.process_checkURLs
    self._processMap["parseURLs"] = Processor.process_parseURLs
    self._processMap["checkOnlineStatus"] = Processor.process_checkOnlineStatus
    self._processMap["checkOnlineStatusContainer"] = Processor.process_checkOnlineStatusContainer
    self._processMap["pollResults"] = Processor.process_pollResults
    self._processMap["generatePackages"] = Processor.process_generatePackages
    self._processMap["generateAndAddPackages"] = Processor.process_generateAndAddPackages
    self._processMap["createPackage"] = Processor.process_createPackage
    self._processMap["addPackage"] = Processor.process_addPackage
    self._processMap["addPackageP"] = Processor.process_addPackageP
    self._processMap["addPackageChild"] = Processor.process_addPackageChild
    self._processMap["uploadContainer"] = Processor.process_uploadContainer
    self._processMap["addLinks"] = Processor.process_addLinks
    self._processMap["addLocalFile"] = Processor.process_addLocalFile
    self._processMap["deleteFiles"] = Processor.process_deleteFiles
    self._processMap["deletePackages"] = Processor.process_deletePackages
    self._processMap["getCollector"] = Processor.process_getCollector
    self._processMap["addToCollector"] = Processor.process_addToCollector
    self._processMap["addFromCollector"] = Processor.process_addFromCollector
    self._processMap["renameCollPack"] = Processor.process_renameCollPack
    self._processMap["deleteCollPack"] = Processor.process_deleteCollPack
    self._processMap["deleteCollLink"] = Processor.process_deleteCollLink
    self._processMap["getAllFiles"] = Processor.process_getAllFiles
    self._processMap["getAllUnfinishedFiles"] = Processor.process_getAllUnfinishedFiles
    self._processMap["getFileTree"] = Processor.process_getFileTree
    self._processMap["getUnfinishedFileTree"] = Processor.process_getUnfinishedFileTree
    self._processMap["getPackageContent"] = Processor.process_getPackageContent
    self._processMap["getPackageInfo"] = Processor.process_getPackageInfo
    self._processMap["getFileInfo"] = Processor.process_getFileInfo
    self._processMap["findFiles"] = Processor.process_findFiles
    self._processMap["restartPackage"] = Processor.process_restartPackage
    self._processMap["restartFile"] = Processor.process_restartFile
    self._processMap["recheckPackage"] = Processor.process_recheckPackage
    self._processMap["restartFailed"] = Processor.process_restartFailed
    self._processMap["setFilePaused"] = Processor.process_setFilePaused
    self._processMap["setPackagePaused"] = Processor.process_setPackagePaused
    self._processMap["setPackageFolder"] = Processor.process_setPackageFolder
    self._processMap["setPackageData"] = Processor.process_setPackageData
    self._processMap["movePackage"] = Processor.process_movePackage
    self._processMap["moveFiles"] = Processor.process_moveFiles
    self._processMap["orderPackage"] = Processor.process_orderPackage
    self._processMap["orderFiles"] = Processor.process_orderFiles
    self._processMap["getProgressInfo"] = Processor.process_getProgressInfo
    self._processMap["stopDownloads"] = Processor.process_stopDownloads
    self._processMap["stopAllDownloads"] = Processor.process_stopAllDownloads
    self._processMap["isInteractionWaiting"] = Processor.process_isInteractionWaiting
    self._processMap["getInteractionTask"] = Processor.process_getInteractionTask
    self._processMap["setInteractionResult"] = Processor.process_setInteractionResult
    self._processMap["generateDownloadLink"] = Processor.process_generateDownloadLink
    self._processMap["getNotifications"] = Processor.process_getNotifications
    self._processMap["getEvents"] = Processor.process_getEvents
    self._processMap["getAccounts"] = Processor.process_getAccounts
    self._processMap["getAccountTypes"] = Processor.process_getAccountTypes
    self._processMap["updateAccount"] = Processor.process_updateAccount
    self._processMap["removeAccount"] = Processor.process_removeAccount
    self._processMap["login"] = Processor.process_login
    self._processMap["getUserData"] = Processor.process_getUserData
    self._processMap["getAllUserData"] = Processor.process_getAllUserData
    self._processMap["addUser"] = Processor.process_addUser
    self._processMap["updateUserData"] = Processor.process_updateUserData
    self._processMap["removeUser"] = Processor.process_removeUser
    self._processMap["setPassword"] = Processor.process_setPassword
    self._processMap["getAllInfo"] = Processor.process_getAllInfo
    self._processMap["getInfoByPlugin"] = Processor.process_getInfoByPlugin
    self._processMap["getAddonHandler"] = Processor.process_getAddonHandler
    self._processMap["hasAddonHandler"] = Processor.process_hasAddonHandler
    self._processMap["callAddon"] = Processor.process_callAddon
    self._processMap["callAddonHandler"] = Processor.process_callAddonHandler

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getServerVersion(self, seqid, iprot, oprot):
    args = getServerVersion_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getServerVersion_result()
    result.success = self._handler.getServerVersion()
    oprot.writeMessageBegin("getServerVersion", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_statusServer(self, seqid, iprot, oprot):
    args = statusServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = statusServer_result()
    result.success = self._handler.statusServer()
    oprot.writeMessageBegin("statusServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_pauseServer(self, seqid, iprot, oprot):
    args = pauseServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = pauseServer_result()
    self._handler.pauseServer()
    oprot.writeMessageBegin("pauseServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_unpauseServer(self, seqid, iprot, oprot):
    args = unpauseServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = unpauseServer_result()
    self._handler.unpauseServer()
    oprot.writeMessageBegin("unpauseServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_togglePause(self, seqid, iprot, oprot):
    args = togglePause_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = togglePause_result()
    result.success = self._handler.togglePause()
    oprot.writeMessageBegin("togglePause", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_freeSpace(self, seqid, iprot, oprot):
    args = freeSpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = freeSpace_result()
    result.success = self._handler.freeSpace()
    oprot.writeMessageBegin("freeSpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_kill(self, seqid, iprot, oprot):
    args = kill_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = kill_result()
    self._handler.kill()
    oprot.writeMessageBegin("kill", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_restart(self, seqid, iprot, oprot):
    args = restart_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = restart_result()
    self._handler.restart()
    oprot.writeMessageBegin("restart", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getLog(self, seqid, iprot, oprot):
    args = getLog_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getLog_result()
    result.success = self._handler.getLog(args.offset)
    oprot.writeMessageBegin("getLog", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_isTimeDownload(self, seqid, iprot, oprot):
    args = isTimeDownload_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isTimeDownload_result()
    result.success = self._handler.isTimeDownload()
    oprot.writeMessageBegin("isTimeDownload", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_isTimeReconnect(self, seqid, iprot, oprot):
    args = isTimeReconnect_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isTimeReconnect_result()
    result.success = self._handler.isTimeReconnect()
    oprot.writeMessageBegin("isTimeReconnect", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_toggleReconnect(self, seqid, iprot, oprot):
    args = toggleReconnect_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = toggleReconnect_result()
    result.success = self._handler.toggleReconnect()
    oprot.writeMessageBegin("toggleReconnect", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_scanDownloadFolder(self, seqid, iprot, oprot):
    args = scanDownloadFolder_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = scanDownloadFolder_result()
    self._handler.scanDownloadFolder()
    oprot.writeMessageBegin("scanDownloadFolder", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getConfigValue(self, seqid, iprot, oprot):
    args = getConfigValue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getConfigValue_result()
    result.success = self._handler.getConfigValue(args.section, args.option)
    oprot.writeMessageBegin("getConfigValue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setConfigValue(self, seqid, iprot, oprot):
    args = setConfigValue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setConfigValue_result()
    self._handler.setConfigValue(args.section, args.option, args.value)
    oprot.writeMessageBegin("setConfigValue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getConfig(self, seqid, iprot, oprot):
    args = getConfig_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getConfig_result()
    result.success = self._handler.getConfig()
    oprot.writeMessageBegin("getConfig", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPluginConfig(self, seqid, iprot, oprot):
    args = getPluginConfig_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPluginConfig_result()
    result.success = self._handler.getPluginConfig()
    oprot.writeMessageBegin("getPluginConfig", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_configureSection(self, seqid, iprot, oprot):
    args = configureSection_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = configureSection_result()
    result.success = self._handler.configureSection(args.section)
    oprot.writeMessageBegin("configureSection", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setConfigHandler(self, seqid, iprot, oprot):
    args = setConfigHandler_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setConfigHandler_result()
    self._handler.setConfigHandler(args.plugin, args.iid, args.value)
    oprot.writeMessageBegin("setConfigHandler", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_checkURLs(self, seqid, iprot, oprot):
    args = checkURLs_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = checkURLs_result()
    result.success = self._handler.checkURLs(args.urls)
    oprot.writeMessageBegin("checkURLs", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_parseURLs(self, seqid, iprot, oprot):
    args = parseURLs_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = parseURLs_result()
    result.success = self._handler.parseURLs(args.html, args.url)
    oprot.writeMessageBegin("parseURLs", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_checkOnlineStatus(self, seqid, iprot, oprot):
    args = checkOnlineStatus_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = checkOnlineStatus_result()
    result.success = self._handler.checkOnlineStatus(args.urls)
    oprot.writeMessageBegin("checkOnlineStatus", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_checkOnlineStatusContainer(self, seqid, iprot, oprot):
    args = checkOnlineStatusContainer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = checkOnlineStatusContainer_result()
    result.success = self._handler.checkOnlineStatusContainer(args.urls, args.filename, args.data)
    oprot.writeMessageBegin("checkOnlineStatusContainer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_pollResults(self, seqid, iprot, oprot):
    args = pollResults_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = pollResults_result()
    result.success = self._handler.pollResults(args.rid)
    oprot.writeMessageBegin("pollResults", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_generatePackages(self, seqid, iprot, oprot):
    args = generatePackages_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = generatePackages_result()
    result.success = self._handler.generatePackages(args.links)
    oprot.writeMessageBegin("generatePackages", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_generateAndAddPackages(self, seqid, iprot, oprot):
    args = generateAndAddPackages_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = generateAndAddPackages_result()
    result.success = self._handler.generateAndAddPackages(args.links, args.paused)
    oprot.writeMessageBegin("generateAndAddPackages", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createPackage(self, seqid, iprot, oprot):
    args = createPackage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createPackage_result()
    result.success = self._handler.createPackage(args.name, args.folder, args.root, args.password, args.site, args.comment, args.paused)
    oprot.writeMessageBegin("createPackage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addPackage(self, seqid, iprot, oprot):
    args = addPackage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addPackage_result()
    result.success = self._handler.addPackage(args.name, args.links, args.password)
    oprot.writeMessageBegin("addPackage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addPackageP(self, seqid, iprot, oprot):
    args = addPackageP_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addPackageP_result()
    result.success = self._handler.addPackageP(args.name, args.links, args.password, args.paused)
    oprot.writeMessageBegin("addPackageP", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addPackageChild(self, seqid, iprot, oprot):
    args = addPackageChild_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addPackageChild_result()
    result.success = self._handler.addPackageChild(args.name, args.links, args.password, args.root, args.paused)
    oprot.writeMessageBegin("addPackageChild", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_uploadContainer(self, seqid, iprot, oprot):
    args = uploadContainer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = uploadContainer_result()
    result.success = self._handler.uploadContainer(args.filename, args.data)
    oprot.writeMessageBegin("uploadContainer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addLinks(self, seqid, iprot, oprot):
    args = addLinks_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addLinks_result()
    try:
      self._handler.addLinks(args.pid, args.links)
    except PackageDoesNotExists, e:
      result.e = e
    oprot.writeMessageBegin("addLinks", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addLocalFile(self, seqid, iprot, oprot):
    args = addLocalFile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addLocalFile_result()
    try:
      self._handler.addLocalFile(args.pid, args.name, args.path)
    except PackageDoesNotExists, e:
      result.e = e
    oprot.writeMessageBegin("addLocalFile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteFiles(self, seqid, iprot, oprot):
    args = deleteFiles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteFiles_result()
    self._handler.deleteFiles(args.fids)
    oprot.writeMessageBegin("deleteFiles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deletePackages(self, seqid, iprot, oprot):
    args = deletePackages_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deletePackages_result()
    self._handler.deletePackages(args.pids)
    oprot.writeMessageBegin("deletePackages", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCollector(self, seqid, iprot, oprot):
    args = getCollector_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCollector_result()
    result.success = self._handler.getCollector()
    oprot.writeMessageBegin("getCollector", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addToCollector(self, seqid, iprot, oprot):
    args = addToCollector_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addToCollector_result()
    self._handler.addToCollector(args.links)
    oprot.writeMessageBegin("addToCollector", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addFromCollector(self, seqid, iprot, oprot):
    args = addFromCollector_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addFromCollector_result()
    result.success = self._handler.addFromCollector(args.name, args.paused)
    oprot.writeMessageBegin("addFromCollector", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_renameCollPack(self, seqid, iprot, oprot):
    args = renameCollPack_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = renameCollPack_result()
    self._handler.renameCollPack(args.name, args.new_name)
    oprot.writeMessageBegin("renameCollPack", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteCollPack(self, seqid, iprot, oprot):
    args = deleteCollPack_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteCollPack_result()
    self._handler.deleteCollPack(args.name)
    oprot.writeMessageBegin("deleteCollPack", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteCollLink(self, seqid, iprot, oprot):
    args = deleteCollLink_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteCollLink_result()
    self._handler.deleteCollLink(args.url)
    oprot.writeMessageBegin("deleteCollLink", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllFiles(self, seqid, iprot, oprot):
    args = getAllFiles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllFiles_result()
    result.success = self._handler.getAllFiles()
    oprot.writeMessageBegin("getAllFiles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllUnfinishedFiles(self, seqid, iprot, oprot):
    args = getAllUnfinishedFiles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllUnfinishedFiles_result()
    result.success = self._handler.getAllUnfinishedFiles()
    oprot.writeMessageBegin("getAllUnfinishedFiles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getFileTree(self, seqid, iprot, oprot):
    args = getFileTree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getFileTree_result()
    result.success = self._handler.getFileTree(args.pid, args.full)
    oprot.writeMessageBegin("getFileTree", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUnfinishedFileTree(self, seqid, iprot, oprot):
    args = getUnfinishedFileTree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUnfinishedFileTree_result()
    result.success = self._handler.getUnfinishedFileTree(args.pid, args.full)
    oprot.writeMessageBegin("getUnfinishedFileTree", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPackageContent(self, seqid, iprot, oprot):
    args = getPackageContent_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPackageContent_result()
    result.success = self._handler.getPackageContent(args.pid)
    oprot.writeMessageBegin("getPackageContent", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPackageInfo(self, seqid, iprot, oprot):
    args = getPackageInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPackageInfo_result()
    try:
      result.success = self._handler.getPackageInfo(args.pid)
    except PackageDoesNotExists, e:
      result.e = e
    oprot.writeMessageBegin("getPackageInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getFileInfo(self, seqid, iprot, oprot):
    args = getFileInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getFileInfo_result()
    try:
      result.success = self._handler.getFileInfo(args.fid)
    except FileDoesNotExists, e:
      result.e = e
    oprot.writeMessageBegin("getFileInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findFiles(self, seqid, iprot, oprot):
    args = findFiles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findFiles_result()
    result.success = self._handler.findFiles(args.pattern)
    oprot.writeMessageBegin("findFiles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_restartPackage(self, seqid, iprot, oprot):
    args = restartPackage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = restartPackage_result()
    self._handler.restartPackage(args.pid)
    oprot.writeMessageBegin("restartPackage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_restartFile(self, seqid, iprot, oprot):
    args = restartFile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = restartFile_result()
    self._handler.restartFile(args.fid)
    oprot.writeMessageBegin("restartFile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_recheckPackage(self, seqid, iprot, oprot):
    args = recheckPackage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = recheckPackage_result()
    self._handler.recheckPackage(args.pid)
    oprot.writeMessageBegin("recheckPackage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_restartFailed(self, seqid, iprot, oprot):
    args = restartFailed_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = restartFailed_result()
    self._handler.restartFailed()
    oprot.writeMessageBegin("restartFailed", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setFilePaused(self, seqid, iprot, oprot):
    args = setFilePaused_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setFilePaused_result()
    try:
      self._handler.setFilePaused(args.fid, args.paused)
    except FileDoesNotExists, e:
      result.e = e
    oprot.writeMessageBegin("setFilePaused", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setPackagePaused(self, seqid, iprot, oprot):
    args = setPackagePaused_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setPackagePaused_result()
    try:
      self._handler.setPackagePaused(args.pid, args.paused)
    except PackageDoesNotExists, e:
      result.e = e
    oprot.writeMessageBegin("setPackagePaused", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setPackageFolder(self, seqid, iprot, oprot):
    args = setPackageFolder_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setPackageFolder_result()
    try:
      result.success = self._handler.setPackageFolder(args.pid, args.path)
    except PackageDoesNotExists, e:
      result.e = e
    oprot.writeMessageBegin("setPackageFolder", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setPackageData(self, seqid, iprot, oprot):
    args = setPackageData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setPackageData_result()
    try:
      self._handler.setPackageData(args.pid, args.data)
    except PackageDoesNotExists, e:
      result.e = e
    oprot.writeMessageBegin("setPackageData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_movePackage(self, seqid, iprot, oprot):
    args = movePackage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = movePackage_result()
    try:
      result.success = self._handler.movePackage(args.pid, args.root)
    except PackageDoesNotExists, e:
      result.e = e
    oprot.writeMessageBegin("movePackage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_moveFiles(self, seqid, iprot, oprot):
    args = moveFiles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = moveFiles_result()
    try:
      result.success = self._handler.moveFiles(args.fids, args.pid)
    except PackageDoesNotExists, e:
      result.e = e
    oprot.writeMessageBegin("moveFiles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_orderPackage(self, seqid, iprot, oprot):
    args = orderPackage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = orderPackage_result()
    self._handler.orderPackage(args.pids, args.position)
    oprot.writeMessageBegin("orderPackage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_orderFiles(self, seqid, iprot, oprot):
    args = orderFiles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = orderFiles_result()
    self._handler.orderFiles(args.fids, args.pid, args.position)
    oprot.writeMessageBegin("orderFiles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getProgressInfo(self, seqid, iprot, oprot):
    args = getProgressInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getProgressInfo_result()
    result.success = self._handler.getProgressInfo()
    oprot.writeMessageBegin("getProgressInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stopDownloads(self, seqid, iprot, oprot):
    args = stopDownloads_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stopDownloads_result()
    self._handler.stopDownloads(args.fids)
    oprot.writeMessageBegin("stopDownloads", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stopAllDownloads(self, seqid, iprot, oprot):
    args = stopAllDownloads_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stopAllDownloads_result()
    self._handler.stopAllDownloads()
    oprot.writeMessageBegin("stopAllDownloads", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_isInteractionWaiting(self, seqid, iprot, oprot):
    args = isInteractionWaiting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isInteractionWaiting_result()
    result.success = self._handler.isInteractionWaiting(args.mode)
    oprot.writeMessageBegin("isInteractionWaiting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getInteractionTask(self, seqid, iprot, oprot):
    args = getInteractionTask_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getInteractionTask_result()
    result.success = self._handler.getInteractionTask(args.mode)
    oprot.writeMessageBegin("getInteractionTask", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setInteractionResult(self, seqid, iprot, oprot):
    args = setInteractionResult_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setInteractionResult_result()
    self._handler.setInteractionResult(args.iid, args.result)
    oprot.writeMessageBegin("setInteractionResult", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_generateDownloadLink(self, seqid, iprot, oprot):
    args = generateDownloadLink_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = generateDownloadLink_result()
    result.success = self._handler.generateDownloadLink(args.fid, args.timeout)
    oprot.writeMessageBegin("generateDownloadLink", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getNotifications(self, seqid, iprot, oprot):
    args = getNotifications_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getNotifications_result()
    result.success = self._handler.getNotifications()
    oprot.writeMessageBegin("getNotifications", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getEvents(self, seqid, iprot, oprot):
    args = getEvents_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getEvents_result()
    result.success = self._handler.getEvents(args.uuid)
    oprot.writeMessageBegin("getEvents", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAccounts(self, seqid, iprot, oprot):
    args = getAccounts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAccounts_result()
    result.success = self._handler.getAccounts(args.refresh)
    oprot.writeMessageBegin("getAccounts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAccountTypes(self, seqid, iprot, oprot):
    args = getAccountTypes_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAccountTypes_result()
    result.success = self._handler.getAccountTypes()
    oprot.writeMessageBegin("getAccountTypes", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateAccount(self, seqid, iprot, oprot):
    args = updateAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateAccount_result()
    self._handler.updateAccount(args.plugin, args.account, args.password, args.options)
    oprot.writeMessageBegin("updateAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeAccount(self, seqid, iprot, oprot):
    args = removeAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeAccount_result()
    self._handler.removeAccount(args.plugin, args.account)
    oprot.writeMessageBegin("removeAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_login(self, seqid, iprot, oprot):
    args = login_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = login_result()
    result.success = self._handler.login(args.username, args.password)
    oprot.writeMessageBegin("login", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUserData(self, seqid, iprot, oprot):
    args = getUserData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUserData_result()
    result.success = self._handler.getUserData()
    oprot.writeMessageBegin("getUserData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllUserData(self, seqid, iprot, oprot):
    args = getAllUserData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllUserData_result()
    result.success = self._handler.getAllUserData()
    oprot.writeMessageBegin("getAllUserData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addUser(self, seqid, iprot, oprot):
    args = addUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addUser_result()
    result.success = self._handler.addUser(args.username, args.password)
    oprot.writeMessageBegin("addUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateUserData(self, seqid, iprot, oprot):
    args = updateUserData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateUserData_result()
    self._handler.updateUserData(args.data)
    oprot.writeMessageBegin("updateUserData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeUser(self, seqid, iprot, oprot):
    args = removeUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeUser_result()
    self._handler.removeUser(args.uid)
    oprot.writeMessageBegin("removeUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setPassword(self, seqid, iprot, oprot):
    args = setPassword_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setPassword_result()
    result.success = self._handler.setPassword(args.username, args.old_password, args.new_password)
    oprot.writeMessageBegin("setPassword", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllInfo(self, seqid, iprot, oprot):
    args = getAllInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllInfo_result()
    result.success = self._handler.getAllInfo()
    oprot.writeMessageBegin("getAllInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getInfoByPlugin(self, seqid, iprot, oprot):
    args = getInfoByPlugin_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getInfoByPlugin_result()
    result.success = self._handler.getInfoByPlugin(args.plugin)
    oprot.writeMessageBegin("getInfoByPlugin", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAddonHandler(self, seqid, iprot, oprot):
    args = getAddonHandler_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAddonHandler_result()
    result.success = self._handler.getAddonHandler()
    oprot.writeMessageBegin("getAddonHandler", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_hasAddonHandler(self, seqid, iprot, oprot):
    args = hasAddonHandler_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = hasAddonHandler_result()
    result.success = self._handler.hasAddonHandler(args.plugin, args.func)
    oprot.writeMessageBegin("hasAddonHandler", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_callAddon(self, seqid, iprot, oprot):
    args = callAddon_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = callAddon_result()
    try:
      self._handler.callAddon(args.plugin, args.func, args.arguments)
    except ServiceDoesNotExists, e:
      result.e = e
    except ServiceException, ex:
      result.ex = ex
    oprot.writeMessageBegin("callAddon", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_callAddonHandler(self, seqid, iprot, oprot):
    args = callAddonHandler_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = callAddonHandler_result()
    try:
      self._handler.callAddonHandler(args.plugin, args.func, args.pid_or_fid)
    except ServiceDoesNotExists, e:
      result.e = e
    except ServiceException, ex:
      result.ex = ex
    oprot.writeMessageBegin("callAddonHandler", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getServerVersion_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getServerVersion_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class statusServer_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class statusServer_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ServerStatus, ServerStatus.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class pauseServer_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class pauseServer_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class unpauseServer_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class unpauseServer_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class togglePause_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class togglePause_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class freeSpace_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class freeSpace_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class kill_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class kill_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class restart_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class restart_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getLog_args(TBase):
  """
  Attributes:
   - offset
  """

  __slots__ = [ 
    'offset',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'offset', None, None, ), # 1
  )

  def __init__(self, offset=None,):
    self.offset = offset


class getLog_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class isTimeDownload_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class isTimeDownload_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class isTimeReconnect_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class isTimeReconnect_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class toggleReconnect_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class toggleReconnect_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class scanDownloadFolder_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class scanDownloadFolder_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getConfigValue_args(TBase):
  """
  Attributes:
   - section
   - option
  """

  __slots__ = [ 
    'section',
    'option',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'section', None, None, ), # 1
    (2, TType.STRING, 'option', None, None, ), # 2
  )

  def __init__(self, section=None, option=None,):
    self.section = section
    self.option = option


class getConfigValue_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class setConfigValue_args(TBase):
  """
  Attributes:
   - section
   - option
   - value
  """

  __slots__ = [ 
    'section',
    'option',
    'value',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'section', None, None, ), # 1
    (2, TType.STRING, 'option', None, None, ), # 2
    (3, TType.STRING, 'value', None, None, ), # 3
  )

  def __init__(self, section=None, option=None, value=None,):
    self.section = section
    self.option = option
    self.value = value


class setConfigValue_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getConfig_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getConfig_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(ConfigSection, ConfigSection.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getPluginConfig_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getPluginConfig_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(ConfigSection, ConfigSection.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class configureSection_args(TBase):
  """
  Attributes:
   - section
  """

  __slots__ = [ 
    'section',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'section', None, None, ), # 1
  )

  def __init__(self, section=None,):
    self.section = section


class configureSection_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ConfigSection, ConfigSection.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class setConfigHandler_args(TBase):
  """
  Attributes:
   - plugin
   - iid
   - value
  """

  __slots__ = [ 
    'plugin',
    'iid',
    'value',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'plugin', None, None, ), # 1
    (2, TType.I32, 'iid', None, None, ), # 2
    (3, TType.STRING, 'value', None, None, ), # 3
  )

  def __init__(self, plugin=None, iid=None, value=None,):
    self.plugin = plugin
    self.iid = iid
    self.value = value


class setConfigHandler_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class checkURLs_args(TBase):
  """
  Attributes:
   - urls
  """

  __slots__ = [ 
    'urls',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'urls', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, urls=None,):
    self.urls = urls


class checkURLs_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.LIST,(TType.STRING,None)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class parseURLs_args(TBase):
  """
  Attributes:
   - html
   - url
  """

  __slots__ = [ 
    'html',
    'url',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'html', None, None, ), # 1
    (2, TType.STRING, 'url', None, None, ), # 2
  )

  def __init__(self, html=None, url=None,):
    self.html = html
    self.url = url


class parseURLs_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.LIST,(TType.STRING,None)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class checkOnlineStatus_args(TBase):
  """
  Attributes:
   - urls
  """

  __slots__ = [ 
    'urls',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'urls', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, urls=None,):
    self.urls = urls


class checkOnlineStatus_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (OnlineCheck, OnlineCheck.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class checkOnlineStatusContainer_args(TBase):
  """
  Attributes:
   - urls
   - filename
   - data
  """

  __slots__ = [ 
    'urls',
    'filename',
    'data',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'urls', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'filename', None, None, ), # 2
    (3, TType.STRING, 'data', None, None, ), # 3
  )

  def __init__(self, urls=None, filename=None, data=None,):
    self.urls = urls
    self.filename = filename
    self.data = data


class checkOnlineStatusContainer_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (OnlineCheck, OnlineCheck.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class pollResults_args(TBase):
  """
  Attributes:
   - rid
  """

  __slots__ = [ 
    'rid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'rid', None, None, ), # 1
  )

  def __init__(self, rid=None,):
    self.rid = rid


class pollResults_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (OnlineCheck, OnlineCheck.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class generatePackages_args(TBase):
  """
  Attributes:
   - links
  """

  __slots__ = [ 
    'links',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'links', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, links=None,):
    self.links = links


class generatePackages_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.LIST,(TType.STRING,None)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class generateAndAddPackages_args(TBase):
  """
  Attributes:
   - links
   - paused
  """

  __slots__ = [ 
    'links',
    'paused',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'links', (TType.STRING,None), None, ), # 1
    (2, TType.BOOL, 'paused', None, None, ), # 2
  )

  def __init__(self, links=None, paused=None,):
    self.links = links
    self.paused = paused


class generateAndAddPackages_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class createPackage_args(TBase):
  """
  Attributes:
   - name
   - folder
   - root
   - password
   - site
   - comment
   - paused
  """

  __slots__ = [ 
    'name',
    'folder',
    'root',
    'password',
    'site',
    'comment',
    'paused',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'folder', None, None, ), # 2
    (3, TType.I32, 'root', None, None, ), # 3
    (4, TType.STRING, 'password', None, None, ), # 4
    (5, TType.STRING, 'site', None, None, ), # 5
    (6, TType.STRING, 'comment', None, None, ), # 6
    (7, TType.BOOL, 'paused', None, None, ), # 7
  )

  def __init__(self, name=None, folder=None, root=None, password=None, site=None, comment=None, paused=None,):
    self.name = name
    self.folder = folder
    self.root = root
    self.password = password
    self.site = site
    self.comment = comment
    self.paused = paused


class createPackage_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class addPackage_args(TBase):
  """
  Attributes:
   - name
   - links
   - password
  """

  __slots__ = [ 
    'name',
    'links',
    'password',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.LIST, 'links', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
  )

  def __init__(self, name=None, links=None, password=None,):
    self.name = name
    self.links = links
    self.password = password


class addPackage_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class addPackageP_args(TBase):
  """
  Attributes:
   - name
   - links
   - password
   - paused
  """

  __slots__ = [ 
    'name',
    'links',
    'password',
    'paused',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.LIST, 'links', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
    (4, TType.BOOL, 'paused', None, None, ), # 4
  )

  def __init__(self, name=None, links=None, password=None, paused=None,):
    self.name = name
    self.links = links
    self.password = password
    self.paused = paused


class addPackageP_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class addPackageChild_args(TBase):
  """
  Attributes:
   - name
   - links
   - password
   - root
   - paused
  """

  __slots__ = [ 
    'name',
    'links',
    'password',
    'root',
    'paused',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.LIST, 'links', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
    (4, TType.I32, 'root', None, None, ), # 4
    (5, TType.BOOL, 'paused', None, None, ), # 5
  )

  def __init__(self, name=None, links=None, password=None, root=None, paused=None,):
    self.name = name
    self.links = links
    self.password = password
    self.root = root
    self.paused = paused


class addPackageChild_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class uploadContainer_args(TBase):
  """
  Attributes:
   - filename
   - data
  """

  __slots__ = [ 
    'filename',
    'data',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'filename', None, None, ), # 1
    (2, TType.STRING, 'data', None, None, ), # 2
  )

  def __init__(self, filename=None, data=None,):
    self.filename = filename
    self.data = data


class uploadContainer_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class addLinks_args(TBase):
  """
  Attributes:
   - pid
   - links
  """

  __slots__ = [ 
    'pid',
    'links',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
    (2, TType.LIST, 'links', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, pid=None, links=None,):
    self.pid = pid
    self.links = links


class addLinks_result(TBase):
  """
  Attributes:
   - e
  """

  __slots__ = [ 
    'e',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (PackageDoesNotExists, PackageDoesNotExists.thrift_spec), None, ), # 1
  )

  def __init__(self, e=None,):
    self.e = e


class addLocalFile_args(TBase):
  """
  Attributes:
   - pid
   - name
   - path
  """

  __slots__ = [ 
    'pid',
    'name',
    'path',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'path', None, None, ), # 3
  )

  def __init__(self, pid=None, name=None, path=None,):
    self.pid = pid
    self.name = name
    self.path = path


class addLocalFile_result(TBase):
  """
  Attributes:
   - e
  """

  __slots__ = [ 
    'e',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (PackageDoesNotExists, PackageDoesNotExists.thrift_spec), None, ), # 1
  )

  def __init__(self, e=None,):
    self.e = e


class deleteFiles_args(TBase):
  """
  Attributes:
   - fids
  """

  __slots__ = [ 
    'fids',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'fids', (TType.I32,None), None, ), # 1
  )

  def __init__(self, fids=None,):
    self.fids = fids


class deleteFiles_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class deletePackages_args(TBase):
  """
  Attributes:
   - pids
  """

  __slots__ = [ 
    'pids',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pids', (TType.I32,None), None, ), # 1
  )

  def __init__(self, pids=None,):
    self.pids = pids


class deletePackages_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getCollector_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getCollector_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(LinkStatus, LinkStatus.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class addToCollector_args(TBase):
  """
  Attributes:
   - links
  """

  __slots__ = [ 
    'links',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'links', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, links=None,):
    self.links = links


class addToCollector_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class addFromCollector_args(TBase):
  """
  Attributes:
   - name
   - paused
  """

  __slots__ = [ 
    'name',
    'paused',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.BOOL, 'paused', None, None, ), # 2
  )

  def __init__(self, name=None, paused=None,):
    self.name = name
    self.paused = paused


class addFromCollector_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class renameCollPack_args(TBase):
  """
  Attributes:
   - name
   - new_name
  """

  __slots__ = [ 
    'name',
    'new_name',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'new_name', None, None, ), # 2
  )

  def __init__(self, name=None, new_name=None,):
    self.name = name
    self.new_name = new_name


class renameCollPack_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class deleteCollPack_args(TBase):
  """
  Attributes:
   - name
  """

  __slots__ = [ 
    'name',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
  )

  def __init__(self, name=None,):
    self.name = name


class deleteCollPack_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class deleteCollLink_args(TBase):
  """
  Attributes:
   - url
  """

  __slots__ = [ 
    'url',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
  )

  def __init__(self, url=None,):
    self.url = url


class deleteCollLink_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getAllFiles_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getAllFiles_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TreeCollection, TreeCollection.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getAllUnfinishedFiles_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getAllUnfinishedFiles_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TreeCollection, TreeCollection.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getFileTree_args(TBase):
  """
  Attributes:
   - pid
   - full
  """

  __slots__ = [ 
    'pid',
    'full',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
    (2, TType.BOOL, 'full', None, None, ), # 2
  )

  def __init__(self, pid=None, full=None,):
    self.pid = pid
    self.full = full


class getFileTree_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TreeCollection, TreeCollection.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getUnfinishedFileTree_args(TBase):
  """
  Attributes:
   - pid
   - full
  """

  __slots__ = [ 
    'pid',
    'full',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
    (2, TType.BOOL, 'full', None, None, ), # 2
  )

  def __init__(self, pid=None, full=None,):
    self.pid = pid
    self.full = full


class getUnfinishedFileTree_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TreeCollection, TreeCollection.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getPackageContent_args(TBase):
  """
  Attributes:
   - pid
  """

  __slots__ = [ 
    'pid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
  )

  def __init__(self, pid=None,):
    self.pid = pid


class getPackageContent_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TreeCollection, TreeCollection.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getPackageInfo_args(TBase):
  """
  Attributes:
   - pid
  """

  __slots__ = [ 
    'pid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
  )

  def __init__(self, pid=None,):
    self.pid = pid


class getPackageInfo_result(TBase):
  """
  Attributes:
   - success
   - e
  """

  __slots__ = [ 
    'success',
    'e',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PackageInfo, PackageInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'e', (PackageDoesNotExists, PackageDoesNotExists.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, e=None,):
    self.success = success
    self.e = e


class getFileInfo_args(TBase):
  """
  Attributes:
   - fid
  """

  __slots__ = [ 
    'fid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'fid', None, None, ), # 1
  )

  def __init__(self, fid=None,):
    self.fid = fid


class getFileInfo_result(TBase):
  """
  Attributes:
   - success
   - e
  """

  __slots__ = [ 
    'success',
    'e',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (FileInfo, FileInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'e', (FileDoesNotExists, FileDoesNotExists.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, e=None,):
    self.success = success
    self.e = e


class findFiles_args(TBase):
  """
  Attributes:
   - pattern
  """

  __slots__ = [ 
    'pattern',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'pattern', None, None, ), # 1
  )

  def __init__(self, pattern=None,):
    self.pattern = pattern


class findFiles_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TreeCollection, TreeCollection.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class restartPackage_args(TBase):
  """
  Attributes:
   - pid
  """

  __slots__ = [ 
    'pid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
  )

  def __init__(self, pid=None,):
    self.pid = pid


class restartPackage_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class restartFile_args(TBase):
  """
  Attributes:
   - fid
  """

  __slots__ = [ 
    'fid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'fid', None, None, ), # 1
  )

  def __init__(self, fid=None,):
    self.fid = fid


class restartFile_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class recheckPackage_args(TBase):
  """
  Attributes:
   - pid
  """

  __slots__ = [ 
    'pid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
  )

  def __init__(self, pid=None,):
    self.pid = pid


class recheckPackage_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class restartFailed_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class restartFailed_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class setFilePaused_args(TBase):
  """
  Attributes:
   - fid
   - paused
  """

  __slots__ = [ 
    'fid',
    'paused',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'fid', None, None, ), # 1
    (2, TType.BOOL, 'paused', None, None, ), # 2
  )

  def __init__(self, fid=None, paused=None,):
    self.fid = fid
    self.paused = paused


class setFilePaused_result(TBase):
  """
  Attributes:
   - e
  """

  __slots__ = [ 
    'e',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (FileDoesNotExists, FileDoesNotExists.thrift_spec), None, ), # 1
  )

  def __init__(self, e=None,):
    self.e = e


class setPackagePaused_args(TBase):
  """
  Attributes:
   - pid
   - paused
  """

  __slots__ = [ 
    'pid',
    'paused',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
    (2, TType.BOOL, 'paused', None, None, ), # 2
  )

  def __init__(self, pid=None, paused=None,):
    self.pid = pid
    self.paused = paused


class setPackagePaused_result(TBase):
  """
  Attributes:
   - e
  """

  __slots__ = [ 
    'e',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (PackageDoesNotExists, PackageDoesNotExists.thrift_spec), None, ), # 1
  )

  def __init__(self, e=None,):
    self.e = e


class setPackageFolder_args(TBase):
  """
  Attributes:
   - pid
   - path
  """

  __slots__ = [ 
    'pid',
    'path',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
    (2, TType.STRING, 'path', None, None, ), # 2
  )

  def __init__(self, pid=None, path=None,):
    self.pid = pid
    self.path = path


class setPackageFolder_result(TBase):
  """
  Attributes:
   - success
   - e
  """

  __slots__ = [ 
    'success',
    'e',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'e', (PackageDoesNotExists, PackageDoesNotExists.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, e=None,):
    self.success = success
    self.e = e


class setPackageData_args(TBase):
  """
  Attributes:
   - pid
   - data
  """

  __slots__ = [ 
    'pid',
    'data',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
    (2, TType.MAP, 'data', (TType.STRING,None,TType.STRING,None), None, ), # 2
  )

  def __init__(self, pid=None, data=None,):
    self.pid = pid
    self.data = data


class setPackageData_result(TBase):
  """
  Attributes:
   - e
  """

  __slots__ = [ 
    'e',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (PackageDoesNotExists, PackageDoesNotExists.thrift_spec), None, ), # 1
  )

  def __init__(self, e=None,):
    self.e = e


class movePackage_args(TBase):
  """
  Attributes:
   - pid
   - root
  """

  __slots__ = [ 
    'pid',
    'root',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pid', None, None, ), # 1
    (2, TType.I32, 'root', None, None, ), # 2
  )

  def __init__(self, pid=None, root=None,):
    self.pid = pid
    self.root = root


class movePackage_result(TBase):
  """
  Attributes:
   - success
   - e
  """

  __slots__ = [ 
    'success',
    'e',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'e', (PackageDoesNotExists, PackageDoesNotExists.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, e=None,):
    self.success = success
    self.e = e


class moveFiles_args(TBase):
  """
  Attributes:
   - fids
   - pid
  """

  __slots__ = [ 
    'fids',
    'pid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'fids', (TType.I32,None), None, ), # 1
    (2, TType.I32, 'pid', None, None, ), # 2
  )

  def __init__(self, fids=None, pid=None,):
    self.fids = fids
    self.pid = pid


class moveFiles_result(TBase):
  """
  Attributes:
   - success
   - e
  """

  __slots__ = [ 
    'success',
    'e',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'e', (PackageDoesNotExists, PackageDoesNotExists.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, e=None,):
    self.success = success
    self.e = e


class orderPackage_args(TBase):
  """
  Attributes:
   - pids
   - position
  """

  __slots__ = [ 
    'pids',
    'position',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pids', (TType.I32,None), None, ), # 1
    (2, TType.I16, 'position', None, None, ), # 2
  )

  def __init__(self, pids=None, position=None,):
    self.pids = pids
    self.position = position


class orderPackage_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class orderFiles_args(TBase):
  """
  Attributes:
   - fids
   - pid
   - position
  """

  __slots__ = [ 
    'fids',
    'pid',
    'position',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'fids', (TType.I32,None), None, ), # 1
    (2, TType.I32, 'pid', None, None, ), # 2
    (3, TType.I16, 'position', None, None, ), # 3
  )

  def __init__(self, fids=None, pid=None, position=None,):
    self.fids = fids
    self.pid = pid
    self.position = position


class orderFiles_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getProgressInfo_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getProgressInfo_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(ProgressInfo, ProgressInfo.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class stopDownloads_args(TBase):
  """
  Attributes:
   - fids
  """

  __slots__ = [ 
    'fids',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'fids', (TType.I32,None), None, ), # 1
  )

  def __init__(self, fids=None,):
    self.fids = fids


class stopDownloads_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class stopAllDownloads_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class stopAllDownloads_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class isInteractionWaiting_args(TBase):
  """
  Attributes:
   - mode
  """

  __slots__ = [ 
    'mode',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'mode', None, None, ), # 1
  )

  def __init__(self, mode=None,):
    self.mode = mode


class isInteractionWaiting_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getInteractionTask_args(TBase):
  """
  Attributes:
   - mode
  """

  __slots__ = [ 
    'mode',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'mode', None, None, ), # 1
  )

  def __init__(self, mode=None,):
    self.mode = mode


class getInteractionTask_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (InteractionTask, InteractionTask.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class setInteractionResult_args(TBase):
  """
  Attributes:
   - iid
   - result
  """

  __slots__ = [ 
    'iid',
    'result',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'iid', None, None, ), # 1
    (2, TType.STRING, 'result', None, None, ), # 2
  )

  def __init__(self, iid=None, result=None,):
    self.iid = iid
    self.result = result


class setInteractionResult_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class generateDownloadLink_args(TBase):
  """
  Attributes:
   - fid
   - timeout
  """

  __slots__ = [ 
    'fid',
    'timeout',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'fid', None, None, ), # 1
    (2, TType.I16, 'timeout', None, None, ), # 2
  )

  def __init__(self, fid=None, timeout=None,):
    self.fid = fid
    self.timeout = timeout


class generateDownloadLink_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getNotifications_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getNotifications_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(InteractionTask, InteractionTask.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getEvents_args(TBase):
  """
  Attributes:
   - uuid
  """

  __slots__ = [ 
    'uuid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
  )

  def __init__(self, uuid=None,):
    self.uuid = uuid


class getEvents_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(EventInfo, EventInfo.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getAccounts_args(TBase):
  """
  Attributes:
   - refresh
  """

  __slots__ = [ 
    'refresh',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'refresh', None, None, ), # 1
  )

  def __init__(self, refresh=None,):
    self.refresh = refresh


class getAccounts_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(AccountInfo, AccountInfo.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getAccountTypes_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getAccountTypes_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class updateAccount_args(TBase):
  """
  Attributes:
   - plugin
   - account
   - password
   - options
  """

  __slots__ = [ 
    'plugin',
    'account',
    'password',
    'options',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'plugin', None, None, ), # 1
    (2, TType.STRING, 'account', None, None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
    (4, TType.MAP, 'options', (TType.STRING,None,TType.STRING,None), None, ), # 4
  )

  def __init__(self, plugin=None, account=None, password=None, options=None,):
    self.plugin = plugin
    self.account = account
    self.password = password
    self.options = options


class updateAccount_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class removeAccount_args(TBase):
  """
  Attributes:
   - plugin
   - account
  """

  __slots__ = [ 
    'plugin',
    'account',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'plugin', None, None, ), # 1
    (2, TType.STRING, 'account', None, None, ), # 2
  )

  def __init__(self, plugin=None, account=None,):
    self.plugin = plugin
    self.account = account


class removeAccount_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class login_args(TBase):
  """
  Attributes:
   - username
   - password
  """

  __slots__ = [ 
    'username',
    'password',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
  )

  def __init__(self, username=None, password=None,):
    self.username = username
    self.password = password


class login_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getUserData_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getUserData_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (UserData, UserData.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getAllUserData_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getAllUserData_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.STRUCT,(UserData, UserData.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class addUser_args(TBase):
  """
  Attributes:
   - username
   - password
  """

  __slots__ = [ 
    'username',
    'password',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
  )

  def __init__(self, username=None, password=None,):
    self.username = username
    self.password = password


class addUser_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.STRUCT, 'success', (UserData, UserData.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class updateUserData_args(TBase):
  """
  Attributes:
   - data
  """

  __slots__ = [ 
    'data',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'data', (UserData, UserData.thrift_spec), None, ), # 1
  )

  def __init__(self, data=None,):
    self.data = data


class updateUserData_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class removeUser_args(TBase):
  """
  Attributes:
   - uid
  """

  __slots__ = [ 
    'uid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid', None, None, ), # 1
  )

  def __init__(self, uid=None,):
    self.uid = uid


class removeUser_result(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class setPassword_args(TBase):
  """
  Attributes:
   - username
   - old_password
   - new_password
  """

  __slots__ = [ 
    'username',
    'old_password',
    'new_password',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'username', None, None, ), # 1
    (2, TType.STRING, 'old_password', None, None, ), # 2
    (3, TType.STRING, 'new_password', None, None, ), # 3
  )

  def __init__(self, username=None, old_password=None, new_password=None,):
    self.username = username
    self.old_password = old_password
    self.new_password = new_password


class setPassword_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getAllInfo_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getAllInfo_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.LIST,(TType.STRUCT,(AddonInfo, AddonInfo.thrift_spec))), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getInfoByPlugin_args(TBase):
  """
  Attributes:
   - plugin
  """

  __slots__ = [ 
    'plugin',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'plugin', None, None, ), # 1
  )

  def __init__(self, plugin=None,):
    self.plugin = plugin


class getInfoByPlugin_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(AddonInfo, AddonInfo.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class getAddonHandler_args(TBase):

  __slots__ = [ 
   ]

  thrift_spec = (
  )


class getAddonHandler_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.LIST,(TType.STRUCT,(AddonService, AddonService.thrift_spec))), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class hasAddonHandler_args(TBase):
  """
  Attributes:
   - plugin
   - func
  """

  __slots__ = [ 
    'plugin',
    'func',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'plugin', None, None, ), # 1
    (2, TType.STRING, 'func', None, None, ), # 2
  )

  def __init__(self, plugin=None, func=None,):
    self.plugin = plugin
    self.func = func


class hasAddonHandler_result(TBase):
  """
  Attributes:
   - success
  """

  __slots__ = [ 
    'success',
   ]

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success


class callAddon_args(TBase):
  """
  Attributes:
   - plugin
   - func
   - arguments
  """

  __slots__ = [ 
    'plugin',
    'func',
    'arguments',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'plugin', None, None, ), # 1
    (2, TType.STRING, 'func', None, None, ), # 2
    (3, TType.LIST, 'arguments', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, plugin=None, func=None, arguments=None,):
    self.plugin = plugin
    self.func = func
    self.arguments = arguments


class callAddon_result(TBase):
  """
  Attributes:
   - e
   - ex
  """

  __slots__ = [ 
    'e',
    'ex',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (ServiceDoesNotExists, ServiceDoesNotExists.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex', (ServiceException, ServiceException.thrift_spec), None, ), # 2
  )

  def __init__(self, e=None, ex=None,):
    self.e = e
    self.ex = ex


class callAddonHandler_args(TBase):
  """
  Attributes:
   - plugin
   - func
   - pid_or_fid
  """

  __slots__ = [ 
    'plugin',
    'func',
    'pid_or_fid',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'plugin', None, None, ), # 1
    (2, TType.STRING, 'func', None, None, ), # 2
    (3, TType.I32, 'pid_or_fid', None, None, ), # 3
  )

  def __init__(self, plugin=None, func=None, pid_or_fid=None,):
    self.plugin = plugin
    self.func = func
    self.pid_or_fid = pid_or_fid


class callAddonHandler_result(TBase):
  """
  Attributes:
   - e
   - ex
  """

  __slots__ = [ 
    'e',
    'ex',
   ]

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'e', (ServiceDoesNotExists, ServiceDoesNotExists.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ex', (ServiceException, ServiceException.thrift_spec), None, ), # 2
  )

  def __init__(self, e=None, ex=None,):
    self.e = e
    self.ex = ex

